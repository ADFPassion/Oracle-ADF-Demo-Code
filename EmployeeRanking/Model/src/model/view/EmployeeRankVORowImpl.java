package model.view;

import java.math.BigDecimal;

import java.util.ArrayList;

import java.util.Iterator;

import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Feb 07 18:00:28 AEDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmployeeRankVORowImpl extends ViewRowImpl {

    public static final int ENTITY_EMPLOYEERANKEO = 0;

    private ArrayList<String> getListOfExistingEmployeesAlreadySelected() {
     
        RowSetIterator ri = null;
        ArrayList<String> existingEmployees = new ArrayList<String>();
           //Create secondary row set to iterator over the employees
        ri =
  (this.getEmployeeRankVO()).createRowSetIterator(null);
        while (ri.hasNext()) {
            EmployeeRankVORowImpl row =
                (EmployeeRankVORowImpl)ri.next();
            if (row != null && row.getEmployeeId() != null) {
                //This employee has already been selected. Add to the list.
                existingEmployees.add(row.getEmployeeId());
            }
        }
        if (ri != null)
            ri.closeRowSetIterator();
       
        return existingEmployees;
    }

    private ArrayList<String> getListOfExistingRanksAlreadySelected() {
        RowSetIterator ri = null;
        ArrayList<String> existingRanks = new ArrayList<String>();
        try {
            //Create secondary row set to iterator over the employee-rank rows
            ri = (this.getEmployeeRankVO()).createRowSetIterator(null);
            while (ri.hasNext()) {
                EmployeeRankVORowImpl row = (EmployeeRankVORowImpl) ri.next();
                if (row != null && row.getRankId() != null) {
                    //This rank has been already been selected. Add to the list.
                    existingRanks.add(row.getRankId());
                }
            }
        } catch (Exception ex) {
            System.out.println("An exception occured");
        } finally {
            if (ri != null)
                ri.closeRowSetIterator();
        }
        return existingRanks;
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        Sno,
        RankId,
        EmployeeId,
        EmployeeRankVO,
        EmployeeCatalogVO,
        RankCatalogVO;
        private static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int SNO = AttributesEnum.Sno.index();
    public static final int RANKID = AttributesEnum.RankId.index();
    public static final int EMPLOYEEID = AttributesEnum.EmployeeId.index();
    public static final int EMPLOYEERANKVO = AttributesEnum.EmployeeRankVO.index();
    public static final int EMPLOYEECATALOGVO = AttributesEnum.EmployeeCatalogVO.index();
    public static final int RANKCATALOGVO = AttributesEnum.RankCatalogVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public EmployeeRankVORowImpl() {
    }

    /**
     * Gets EmployeeRankEO entity object.
     * @return the EmployeeRankEO
     */
    public EntityImpl getEmployeeRankEO() {
        return (EntityImpl) getEntity(ENTITY_EMPLOYEERANKEO);
    }

    /**
     * Gets the attribute value for SNO using the alias name Sno.
     * @return the SNO
     */
    public BigDecimal getSno() {
        return (BigDecimal) getAttributeInternal(SNO);
    }

    /**
     * Sets <code>value</code> as attribute value for SNO using the alias name Sno.
     * @param value value to set the SNO
     */
    public void setSno(BigDecimal value) {
        setAttributeInternal(SNO, value);
    }

    /**
     * Gets the attribute value for RANK_ID using the alias name RankId.
     * @return the RANK_ID
     */
    public String getRankId() {
        return (String) getAttributeInternal(RANKID);
    }

    /**
     * Sets <code>value</code> as attribute value for RANK_ID using the alias name RankId.
     * @param value value to set the RANK_ID
     */
    public void setRankId(String value) {
        setAttributeInternal(RANKID, value);
    }

    /**
     * Gets the attribute value for EMPLOYEE_ID using the alias name EmployeeId.
     * @return the EMPLOYEE_ID
     */
    public String getEmployeeId() {
        return (String) getAttributeInternal(EMPLOYEEID);
    }

    /**
     * Sets <code>value</code> as attribute value for EMPLOYEE_ID using the alias name EmployeeId.
     * @param value value to set the EMPLOYEE_ID
     */
    public void setEmployeeId(String value) {
        setAttributeInternal(EMPLOYEEID, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> EmployeeRankVO.
     */
    public RowSet getEmployeeRankVO() {
        return (RowSet) getAttributeInternal(EMPLOYEERANKVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> EmployeeCatalogVO.
     */
    public RowSet getEmployeeCatalogVO() {
        RowSet rowSet = (RowSet) getAttributeInternal(EMPLOYEECATALOGVO);
        
        //Set the mode to cache to ensure the view criteria is applied in memory
        ViewCriteria vc = rowSet.getViewObject().createViewCriteria();
        vc.setCriteriaMode(ViewCriteria.CRITERIA_MODE_CACHE);

        //Get the employees that have already been selected
        ArrayList<String> employees = getListOfExistingEmployeesAlreadySelected();

        //Build the view criteria by iterating through the already selected employees
        Iterator iter = employees.iterator();
        while (iter.hasNext()) {
            String employee = (String) iter.next();
            ViewCriteriaRow vcr1 = vc.createViewCriteriaRow();
            vcr1.setAttribute("EmployeeId", "<> " + employee);
            vcr1.setConjunction(ViewCriteriaRow.VC_CONJ_AND);
            vc.add(vcr1);
        }

        //Apply the view criteria with mode - SCAN VIEW ROWS | SCAN DATABASE TABLES
        ViewRowSetImpl rs =
            (ViewRowSetImpl) rowSet.findByViewCriteria(vc, -1,
                                                       ViewObject.QUERY_MODE_SCAN_DATABASE_TABLES |
                                                       ViewObject.QUERY_MODE_SCAN_VIEW_ROWS);
        return rs;
    }

    /**
     * Gets the view accessor <code>RowSet</code> RankCatalogVO.
     */
    public RowSet getRankCatalogVO() {
        RowSet rowSet = (RowSet) getAttributeInternal(RANKCATALOGVO);

        //Set the mode to cache to ensure the view criteria is applied in memory
        ViewCriteria vc = rowSet.getViewObject().createViewCriteria();
        vc.setCriteriaMode(ViewCriteria.CRITERIA_MODE_CACHE);

        //Get the ranks that have already been selected
        ArrayList<String> ranks = getListOfExistingRanksAlreadySelected();

        //Build the view criteria by iterating through the already selected ranks
        Iterator iter = ranks.iterator();
        while (iter.hasNext()) {
            String rank = (String) iter.next();
            ViewCriteriaRow vcr1 = vc.createViewCriteriaRow();
            vcr1.setAttribute("RankId", "<> " + rank);
            vcr1.setConjunction(ViewCriteriaRow.VC_CONJ_AND);
            vc.add(vcr1);
        }

        //Apply the view criteria with mode - SCAN VIEW ROWS | SCAN DATABASE TABLES
        ViewRowSetImpl rs =
            (ViewRowSetImpl) rowSet.findByViewCriteria(vc, -1,
                                                       ViewObject.QUERY_MODE_SCAN_DATABASE_TABLES |
                                                       ViewObject.QUERY_MODE_SCAN_VIEW_ROWS);
        return rs;
    }
}

